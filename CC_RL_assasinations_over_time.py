# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lm0b-jBs9CY29hGDbrGcuEqKE4moS1Za
"""

import random
import matplotlib.pyplot as plt
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
from collections import deque

# --- HYPERPARAMETERS ---
GAMMA = 0.99
LEARNING_RATE = 0.001
EPSILON = 1.0
EPSILON_DECAY = 0.995
EPSILON_MIN = 0.1
BATCH_SIZE = 32
MEMORY_SIZE = 5000

# --- DEEP Q-NETWORK ---
class DQN(nn.Module):
    def __init__(self, state_size, action_size):
        super(DQN, self).__init__()
        self.fc1 = nn.Linear(state_size, 64)
        self.fc2 = nn.Linear(64, 64)
        self.fc3 = nn.Linear(64, action_size)

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        return self.fc3(x)

# --- CHARACTER CLASSES ---
class Knight:
    def __init__(self, name, duke):
        self.name = name
        self.gold = 1
        self.power = 2
        self.assassination_attempts = 0
        self.duke = duke

    def take_action(self):
        action = random.choices(
            ["Duel", "Train", "Mission", "Steal Gold", "Buy Equipment", "Attempt Assassination"],
            weights=[2, 2, 2, 1, 1, 1]  # Increase chance of assassination attempts
        )[0]

        if action == "Duel":
            self.power += 3 if random.random() < 0.55 else 0
        elif action == "Train":
            self.power += 2
        elif action == "Mission":
            if random.random() < 0.75:
                self.gold += 14
                self.power += 2
        elif action == "Steal Gold":
            self.gold += 5
        elif action == "Buy Equipment" and self.gold >= 8:
            self.gold -= 8
        elif action == "Attempt Assassination" and self.gold >= 15 and self.power >= 12:
            self.assassination_attempts += 1
        return action

class RL_Knight:
    def __init__(self, name, duke, model, target_model, optimizer, memory):
        self.name = name
        self.gold = 1
        self.power = 2
        self.assassination_attempts = 0
        self.duke = duke
        self.model = model
        self.target_model = target_model
        self.optimizer = optimizer
        self.memory = memory
        self.state_size = 2  # gold, power
        self.action_size = 2  # Normal action, Assassinate

    def get_state(self):
        return np.array([self.gold, self.power], dtype=np.float32)

    def take_action(self):
        global EPSILON
        state = torch.tensor(self.get_state(), dtype=torch.float32).unsqueeze(0)
        if random.random() < EPSILON:
            action = 1 if self.gold >= 15 and self.power >= 12 else 0
        else:
            with torch.no_grad():
                action = self.model(state).argmax().item()

        if action == 1:
            self.assassination_attempts += 1
            reward = 10
        else:
            reward = -1

        next_state = torch.tensor(self.get_state(), dtype=torch.float32).unsqueeze(0)
        self.memory.append((state, action, reward, next_state))
        EPSILON = max(EPSILON * EPSILON_DECAY, EPSILON_MIN)
        return reward

# --- TRAINING SETUP ---
rl_model = DQN(2, 2)
target_model = DQN(2, 2)
target_model.load_state_dict(rl_model.state_dict())
target_model.eval()
optimizer = optim.Adam(rl_model.parameters(), lr=LEARNING_RATE)
memory = deque(maxlen=MEMORY_SIZE)

# --- SIMULATION ---
assassination_attempts = {f"Knight_{i+1}": [] for i in range(12)}
assassination_attempts["RL_Knight"] = []

for simulation_run in range(50):
    dukes = [f"Duke_{i+1}" for i in range(6)]
    knights = [Knight(f"Knight_{i+1}", random.choice(dukes)) for i in range(11)]
    rl_knight = RL_Knight("RL_Knight", random.choice(dukes), rl_model, target_model, optimizer, memory)
    knights.append(rl_knight)

    for turn in range(50):
        for knight in knights:
            knight.take_action()
            assassination_attempts[knight.name].append(knight.assassination_attempts)

# --- GRAPHING RESULTS ---
plt.figure(figsize=(12, 6))
for name, attempts in assassination_attempts.items():
    if name == "RL_Knight":
        plt.plot(attempts, label=name, linewidth=2, linestyle='-')
    else:
        plt.plot(attempts, linestyle='dotted', alpha=0.6)
plt.xlabel('Turns')
plt.ylabel('Assassination Attempts')
plt.title('Assassination Attempts Over Time (RL vs. Normal Knights)')
plt.legend()
plt.show()